on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        shell: bash
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan 
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true 
        

      # - name: Update Pull Request
      #   uses: actions/github-script@v6
      #   if: github.event_name == 'pull_request'
      #   env:
      #    PLAN: "terraform\n${{ steps.plan.outputs.stdout }}" 
      #    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}       
      #   with:
         #github-token: ${{ secrets.GITHUB_TOKEN }}
        #  script: |
        #   const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
        #   #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
        #   #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
        #   #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

        #   <details><summary>Show Plan</summary>

        #   \`\`\`\n
        #   ${process.env.PLAN}
        #    \`\`\`

        #   </details>

        #   *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

        #    github.rest.issues.createComment ({
        #    issue_number: context.issue.number,
        #    owner: context.repo.owner,
        #   repo: context.repo.repo,
        #    body: output
        #   })
      # - name: Update Pull Request
      #   #if: ${{ failure() }}
      #   uses: actions/github-script@v6
      #   with:
      #    token: ${{ secrets.GIT_TOKEN }}
      #    title: Action workflow failed for [Codebase](https://github.com/${{ github.repository }}/tree/${{ github.sha }})
      #    body: |
      #       ### Context
      #       [Failed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
      #       [Codebase](https://github.com/${{ github.repository }}/tree/${{ github.sha }})
      #       Workflow name - `${{ github.workflow }}`
      #       Job -           `${{ github.job }}`
      #       status -        `${{ job.status }}`
      #       #### Terraform Initialization ‚öôÔ∏è`${{ steps.init.outcome }}`
      #       #### Terraform Plan üìñ`${{ steps.plans.outcome }}`
      #       #<details><summary>Show Plan</summary>
      #       `${{steps.plans.outputs.stderr}}`
      #       `${{steps.plans.outputs.stdout}}`
      #       </details>
      #       *Pushed by: @${{ github.actor }}, Action: `${{ github.event_name }}`*`
      #    assignees: ${{ github.actor }}

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false